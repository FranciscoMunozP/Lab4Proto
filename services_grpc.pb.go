// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: Director/services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Director_ReportPrepareness_FullMethodName = "/main.Director/ReportPrepareness"
	Director_CheckMoneyBalance_FullMethodName = "/main.Director/CheckMoneyBalance"
	Director_ChooseProcess_FullMethodName     = "/main.Director/ChooseProcess"
)

// DirectorClient is the client API for Director service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorClient interface {
	ReportPrepareness(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	CheckMoneyBalance(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*MoneyBalance, error)
	ChooseProcess(ctx context.Context, in *ChoiceRequest, opts ...grpc.CallOption) (*ChoiceMercenary, error)
}

type directorClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorClient(cc grpc.ClientConnInterface) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) ReportPrepareness(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, Director_ReportPrepareness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) CheckMoneyBalance(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*MoneyBalance, error) {
	out := new(MoneyBalance)
	err := c.cc.Invoke(ctx, Director_CheckMoneyBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ChooseProcess(ctx context.Context, in *ChoiceRequest, opts ...grpc.CallOption) (*ChoiceMercenary, error) {
	out := new(ChoiceMercenary)
	err := c.cc.Invoke(ctx, Director_ChooseProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServer is the server API for Director service.
// All implementations must embed UnimplementedDirectorServer
// for forward compatibility
type DirectorServer interface {
	ReportPrepareness(context.Context, *PrepareRequest) (*PrepareResponse, error)
	CheckMoneyBalance(context.Context, *PrepareRequest) (*MoneyBalance, error)
	ChooseProcess(context.Context, *ChoiceRequest) (*ChoiceMercenary, error)
	mustEmbedUnimplementedDirectorServer()
}

// UnimplementedDirectorServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServer struct {
}

func (UnimplementedDirectorServer) ReportPrepareness(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPrepareness not implemented")
}
func (UnimplementedDirectorServer) CheckMoneyBalance(context.Context, *PrepareRequest) (*MoneyBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMoneyBalance not implemented")
}
func (UnimplementedDirectorServer) ChooseProcess(context.Context, *ChoiceRequest) (*ChoiceMercenary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseProcess not implemented")
}
func (UnimplementedDirectorServer) mustEmbedUnimplementedDirectorServer() {}

// UnsafeDirectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServer will
// result in compilation errors.
type UnsafeDirectorServer interface {
	mustEmbedUnimplementedDirectorServer()
}

func RegisterDirectorServer(s grpc.ServiceRegistrar, srv DirectorServer) {
	s.RegisterService(&Director_ServiceDesc, srv)
}

func _Director_ReportPrepareness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ReportPrepareness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Director_ReportPrepareness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ReportPrepareness(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_CheckMoneyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).CheckMoneyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Director_CheckMoneyBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).CheckMoneyBalance(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ChooseProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ChooseProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Director_ChooseProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ChooseProcess(ctx, req.(*ChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Director_ServiceDesc is the grpc.ServiceDesc for Director service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Director_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportPrepareness",
			Handler:    _Director_ReportPrepareness_Handler,
		},
		{
			MethodName: "CheckMoneyBalance",
			Handler:    _Director_CheckMoneyBalance_Handler,
		},
		{
			MethodName: "ChooseProcess",
			Handler:    _Director_ChooseProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Director/services.proto",
}

const (
	Mercenario_NotifyElimination_FullMethodName = "/main.Mercenario/NotifyElimination"
)

// MercenarioClient is the client API for Mercenario service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercenarioClient interface {
	NotifyElimination(ctx context.Context, in *EliminationNotification, opts ...grpc.CallOption) (*Confirmation, error)
}

type mercenarioClient struct {
	cc grpc.ClientConnInterface
}

func NewMercenarioClient(cc grpc.ClientConnInterface) MercenarioClient {
	return &mercenarioClient{cc}
}

func (c *mercenarioClient) NotifyElimination(ctx context.Context, in *EliminationNotification, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, Mercenario_NotifyElimination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercenarioServer is the server API for Mercenario service.
// All implementations must embed UnimplementedMercenarioServer
// for forward compatibility
type MercenarioServer interface {
	NotifyElimination(context.Context, *EliminationNotification) (*Confirmation, error)
	mustEmbedUnimplementedMercenarioServer()
}

// UnimplementedMercenarioServer must be embedded to have forward compatible implementations.
type UnimplementedMercenarioServer struct {
}

func (UnimplementedMercenarioServer) NotifyElimination(context.Context, *EliminationNotification) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyElimination not implemented")
}
func (UnimplementedMercenarioServer) mustEmbedUnimplementedMercenarioServer() {}

// UnsafeMercenarioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercenarioServer will
// result in compilation errors.
type UnsafeMercenarioServer interface {
	mustEmbedUnimplementedMercenarioServer()
}

func RegisterMercenarioServer(s grpc.ServiceRegistrar, srv MercenarioServer) {
	s.RegisterService(&Mercenario_ServiceDesc, srv)
}

func _Mercenario_NotifyElimination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EliminationNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercenarioServer).NotifyElimination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mercenario_NotifyElimination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercenarioServer).NotifyElimination(ctx, req.(*EliminationNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// Mercenario_ServiceDesc is the grpc.ServiceDesc for Mercenario service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mercenario_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Mercenario",
	HandlerType: (*MercenarioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyElimination",
			Handler:    _Mercenario_NotifyElimination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Director/services.proto",
}

const (
	DataNode_RequestChoice_FullMethodName = "/main.DataNode/RequestChoice"
)

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	RequestChoice(ctx context.Context, in *ChoiceRecover, opts ...grpc.CallOption) (*ChoiceMercenary, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) RequestChoice(ctx context.Context, in *ChoiceRecover, opts ...grpc.CallOption) (*ChoiceMercenary, error) {
	out := new(ChoiceMercenary)
	err := c.cc.Invoke(ctx, DataNode_RequestChoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	RequestChoice(context.Context, *ChoiceRecover) (*ChoiceMercenary, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) RequestChoice(context.Context, *ChoiceRecover) (*ChoiceMercenary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChoice not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s grpc.ServiceRegistrar, srv DataNodeServer) {
	s.RegisterService(&DataNode_ServiceDesc, srv)
}

func _DataNode_RequestChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceRecover)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).RequestChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNode_RequestChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).RequestChoice(ctx, req.(*ChoiceRecover))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_ServiceDesc is the grpc.ServiceDesc for DataNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestChoice",
			Handler:    _DataNode_RequestChoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Director/services.proto",
}

const (
	NameNode_StoreChoice_FullMethodName   = "/main.NameNode/StoreChoice"
	NameNode_RecoverChoice_FullMethodName = "/main.NameNode/RecoverChoice"
)

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeClient interface {
	StoreChoice(ctx context.Context, in *ChoiceMercenary, opts ...grpc.CallOption) (*Confirmation, error)
	RecoverChoice(ctx context.Context, in *ChoiceRequest, opts ...grpc.CallOption) (*ChoiceMercenary, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) StoreChoice(ctx context.Context, in *ChoiceMercenary, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, NameNode_StoreChoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) RecoverChoice(ctx context.Context, in *ChoiceRequest, opts ...grpc.CallOption) (*ChoiceMercenary, error) {
	out := new(ChoiceMercenary)
	err := c.cc.Invoke(ctx, NameNode_RecoverChoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServer is the server API for NameNode service.
// All implementations must embed UnimplementedNameNodeServer
// for forward compatibility
type NameNodeServer interface {
	StoreChoice(context.Context, *ChoiceMercenary) (*Confirmation, error)
	RecoverChoice(context.Context, *ChoiceRequest) (*ChoiceMercenary, error)
	mustEmbedUnimplementedNameNodeServer()
}

// UnimplementedNameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (UnimplementedNameNodeServer) StoreChoice(context.Context, *ChoiceMercenary) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChoice not implemented")
}
func (UnimplementedNameNodeServer) RecoverChoice(context.Context, *ChoiceRequest) (*ChoiceMercenary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverChoice not implemented")
}
func (UnimplementedNameNodeServer) mustEmbedUnimplementedNameNodeServer() {}

// UnsafeNameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServer will
// result in compilation errors.
type UnsafeNameNodeServer interface {
	mustEmbedUnimplementedNameNodeServer()
}

func RegisterNameNodeServer(s grpc.ServiceRegistrar, srv NameNodeServer) {
	s.RegisterService(&NameNode_ServiceDesc, srv)
}

func _NameNode_StoreChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceMercenary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).StoreChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNode_StoreChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).StoreChoice(ctx, req.(*ChoiceMercenary))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_RecoverChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).RecoverChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNode_RecoverChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).RecoverChoice(ctx, req.(*ChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNode_ServiceDesc is the grpc.ServiceDesc for NameNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreChoice",
			Handler:    _NameNode_StoreChoice_Handler,
		},
		{
			MethodName: "RecoverChoice",
			Handler:    _NameNode_RecoverChoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Director/services.proto",
}

const (
	DoshBank_GetCurrentBalance_FullMethodName = "/main.DoshBank/GetCurrentBalance"
)

// DoshBankClient is the client API for DoshBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoshBankClient interface {
	GetCurrentBalance(ctx context.Context, in *PrepareResponse, opts ...grpc.CallOption) (*MoneyBalance, error)
}

type doshBankClient struct {
	cc grpc.ClientConnInterface
}

func NewDoshBankClient(cc grpc.ClientConnInterface) DoshBankClient {
	return &doshBankClient{cc}
}

func (c *doshBankClient) GetCurrentBalance(ctx context.Context, in *PrepareResponse, opts ...grpc.CallOption) (*MoneyBalance, error) {
	out := new(MoneyBalance)
	err := c.cc.Invoke(ctx, DoshBank_GetCurrentBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoshBankServer is the server API for DoshBank service.
// All implementations must embed UnimplementedDoshBankServer
// for forward compatibility
type DoshBankServer interface {
	GetCurrentBalance(context.Context, *PrepareResponse) (*MoneyBalance, error)
	mustEmbedUnimplementedDoshBankServer()
}

// UnimplementedDoshBankServer must be embedded to have forward compatible implementations.
type UnimplementedDoshBankServer struct {
}

func (UnimplementedDoshBankServer) GetCurrentBalance(context.Context, *PrepareResponse) (*MoneyBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBalance not implemented")
}
func (UnimplementedDoshBankServer) mustEmbedUnimplementedDoshBankServer() {}

// UnsafeDoshBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoshBankServer will
// result in compilation errors.
type UnsafeDoshBankServer interface {
	mustEmbedUnimplementedDoshBankServer()
}

func RegisterDoshBankServer(s grpc.ServiceRegistrar, srv DoshBankServer) {
	s.RegisterService(&DoshBank_ServiceDesc, srv)
}

func _DoshBank_GetCurrentBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoshBankServer).GetCurrentBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoshBank_GetCurrentBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoshBankServer).GetCurrentBalance(ctx, req.(*PrepareResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// DoshBank_ServiceDesc is the grpc.ServiceDesc for DoshBank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoshBank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.DoshBank",
	HandlerType: (*DoshBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentBalance",
			Handler:    _DoshBank_GetCurrentBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Director/services.proto",
}
